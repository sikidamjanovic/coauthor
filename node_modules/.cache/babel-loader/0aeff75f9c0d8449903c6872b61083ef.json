{"ast":null,"code":"import { firestore } from \"firebase\";\nimport { responsiveArray } from \"antd/lib/_util/responsiveObserve\";\nimport { getFirestore } from \"redux-firestore\";\nimport { relativeTimeRounding } from \"moment\";\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    let check = false;\n    let usersRef = firestore.collection('users');\n    let query = usersRef.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        //console.log(doc.id, '=>', doc.data());\n        if (doc.id == newUser.username) {\n          check = true;\n          console.log('fuck');\n        }\n      });\n\n      if (check == false) {\n        firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => {\n          firebase.auth().currentUser.updateProfile({\n            displayName: newUser.username\n          });\n          return firestore.collection('users').doc(newUser.username).set({\n            uid: resp.user.uid\n          }), firebase.auth().currentUser.sendEmailVerification().then(function () {//email sent, look for emailVerified\n          }).catch(function (err) {//error\n          });\n        }).then(() => {\n          dispatch({\n            type: 'SIGNUP_SUCCESS'\n          });\n        }).catch(err => {\n          dispatch({\n            type: 'SIGNUP_ERROR',\n            err\n          });\n        });\n      } else {\n        dispatch({\n          type: 'NAME_TAKEN'\n        });\n      }\n    });\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:\\Personal Files\\Projects\\CoAuthor\\coauthor\\src\\Store\\Actions\\authActions.js"],"names":["firestore","responsiveArray","getFirestore","relativeTimeRounding","signIn","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","catch","err","signOut","signUp","newUser","check","usersRef","collection","query","get","snapshot","forEach","doc","id","username","console","log","createUserWithEmailAndPassword","resp","currentUser","updateProfile","displayName","set","uid","user","sendEmailVerification"],"mappings":"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","sourcesContent":["import { firestore } from \"firebase\";\r\nimport { responsiveArray } from \"antd/lib/_util/responsiveObserve\";\r\nimport { getFirestore } from \"redux-firestore\";\r\nimport { relativeTimeRounding } from \"moment\";\r\n\r\nexport const signIn = (credentials) => {\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch({ type: 'LOGIN_SUCCESS'});\r\n        }).catch((err) => {\r\n            dispatch({ type: 'LOGIN_ERROR', err });\r\n        })\r\n    }\r\n} \r\n\r\nexport const signOut = () => {\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\r\n        });\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n       \r\n        let check = false;\r\n        let usersRef = firestore.collection('users');\r\n        let query = usersRef.get(\r\n        ).then(snapshot => {\r\n            snapshot.forEach(doc => {\r\n                //console.log(doc.id, '=>', doc.data());\r\n                if (doc.id == newUser.username) { check = true; console.log('fuck')}\r\n            });\r\n            if (check == false) {\r\n\r\n                firebase.auth().createUserWithEmailAndPassword(\r\n                    newUser.email,\r\n                    newUser.password,\r\n                ).then((resp) => {\r\n                    firebase.auth().currentUser.updateProfile({\r\n                    displayName: newUser.username,\r\n                    });\r\n                    return (\r\n                        firestore.collection('users').doc(newUser.username).set({\r\n                            uid: resp.user.uid\r\n                        }),\r\n                        firebase.auth().currentUser.sendEmailVerification().then(function() {\r\n                            //email sent, look for emailVerified\r\n                        }).catch(function(err) {\r\n                            //error\r\n                        })\r\n                    )\r\n                }).then(() => {\r\n                    dispatch({ type: 'SIGNUP_SUCCESS'})\r\n                    \r\n                }).catch(err => {\r\n                    dispatch({ type: 'SIGNUP_ERROR', err})\r\n                })\r\n            } else {\r\n                dispatch({ type: 'NAME_TAKEN'})\r\n            }\r\n        })\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}