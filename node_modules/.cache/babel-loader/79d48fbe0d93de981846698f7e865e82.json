{"ast":null,"code":"/**\r\n * Delegate to handle a media query being matched and unmatched.\r\n *\r\n * @param {object} options\r\n * @param {function} options.match callback for when the media query is matched\r\n * @param {function} [options.unmatch] callback for when the media query is unmatched\r\n * @param {function} [options.setup] one-time callback triggered the first time a query is matched\r\n * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?\r\n * @constructor\r\n */\nfunction QueryHandler(options) {\n  this.options = options;\n  !options.deferSetup && this.setup();\n}\n\nQueryHandler.prototype = {\n  constructor: QueryHandler,\n\n  /**\r\n   * coordinates setup of the handler\r\n   *\r\n   * @function\r\n   */\n  setup: function () {\n    if (this.options.setup) {\n      this.options.setup();\n    }\n\n    this.initialised = true;\n  },\n\n  /**\r\n   * coordinates setup and triggering of the handler\r\n   *\r\n   * @function\r\n   */\n  on: function () {\n    !this.initialised && this.setup();\n    this.options.match && this.options.match();\n  },\n\n  /**\r\n   * coordinates the unmatch event for the handler\r\n   *\r\n   * @function\r\n   */\n  off: function () {\n    this.options.unmatch && this.options.unmatch();\n  },\n\n  /**\r\n   * called when a handler is to be destroyed.\r\n   * delegates to the destroy or unmatch callbacks, depending on availability.\r\n   *\r\n   * @function\r\n   */\n  destroy: function () {\n    this.options.destroy ? this.options.destroy() : this.off();\n  },\n\n  /**\r\n   * determines equality by reference.\r\n   * if object is supplied compare options, if function, compare match callback\r\n   *\r\n   * @function\r\n   * @param {object || function} [target] the target for comparison\r\n   */\n  equals: function (target) {\n    return this.options === target || this.options.match === target;\n  }\n};\nmodule.exports = QueryHandler;","map":null,"metadata":{},"sourceType":"script"}