{"ast":null,"code":"var MediaQuery = require('./MediaQuery');\n\nvar Util = require('./Util');\n\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n/**\r\n * Allows for registration of query handlers.\r\n * Manages the query handler's state and is responsible for wiring up browser events\r\n *\r\n * @constructor\r\n */\n\nfunction MediaQueryDispatch() {\n  if (!window.matchMedia) {\n    throw new Error('matchMedia not present, legacy browsers require a polyfill');\n  }\n\n  this.queries = {};\n  this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n  constructor: MediaQueryDispatch,\n\n  /**\r\n   * Registers a handler for the given media query\r\n   *\r\n   * @param {string} q the media query\r\n   * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\r\n   * @param {function} options.match fired when query matched\r\n   * @param {function} [options.unmatch] fired when a query is no longer matched\r\n   * @param {function} [options.setup] fired when handler first triggered\r\n   * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\r\n   * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\r\n   */\n  register: function (q, options, shouldDegrade) {\n    var queries = this.queries,\n        isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n    if (!queries[q]) {\n      queries[q] = new MediaQuery(q, isUnconditional);\n    } //normalise to object in an array\n\n\n    if (isFunction(options)) {\n      options = {\n        match: options\n      };\n    }\n\n    if (!isArray(options)) {\n      options = [options];\n    }\n\n    each(options, function (handler) {\n      if (isFunction(handler)) {\n        handler = {\n          match: handler\n        };\n      }\n\n      queries[q].addHandler(handler);\n    });\n    return this;\n  },\n\n  /**\r\n   * unregisters a query and all it's handlers, or a specific handler for a query\r\n   *\r\n   * @param {string} q the media query to target\r\n   * @param {object || function} [handler] specific handler to unregister\r\n   */\n  unregister: function (q, handler) {\n    var query = this.queries[q];\n\n    if (query) {\n      if (handler) {\n        query.removeHandler(handler);\n      } else {\n        query.clear();\n        delete this.queries[q];\n      }\n    }\n\n    return this;\n  }\n};\nmodule.exports = MediaQueryDispatch;","map":null,"metadata":{},"sourceType":"script"}