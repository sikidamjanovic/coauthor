{"ast":null,"code":"var QueryHandler = require('./QueryHandler');\n\nvar each = require('./Util').each;\n/**\r\n * Represents a single media query, manages it's state and registered handlers for this query\r\n *\r\n * @constructor\r\n * @param {string} query the media query string\r\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\r\n */\n\n\nfunction MediaQuery(query, isUnconditional) {\n  this.query = query;\n  this.isUnconditional = isUnconditional;\n  this.handlers = [];\n  this.mql = window.matchMedia(query);\n  var self = this;\n\n  this.listener = function (mql) {\n    // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n    self.mql = mql.currentTarget || mql;\n    self.assess();\n  };\n\n  this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n  constuctor: MediaQuery,\n\n  /**\r\n   * add a handler for this query, triggering if already active\r\n   *\r\n   * @param {object} handler\r\n   * @param {function} handler.match callback for when query is activated\r\n   * @param {function} [handler.unmatch] callback for when query is deactivated\r\n   * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\r\n   * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\r\n   */\n  addHandler: function (handler) {\n    var qh = new QueryHandler(handler);\n    this.handlers.push(qh);\n    this.matches() && qh.on();\n  },\n\n  /**\r\n   * removes the given handler from the collection, and calls it's destroy methods\r\n   *\r\n   * @param {object || function} handler the handler to remove\r\n   */\n  removeHandler: function (handler) {\n    var handlers = this.handlers;\n    each(handlers, function (h, i) {\n      if (h.equals(handler)) {\n        h.destroy();\n        return !handlers.splice(i, 1); //remove from array and exit each early\n      }\n    });\n  },\n\n  /**\r\n   * Determine whether the media query should be considered a match\r\n   *\r\n   * @return {Boolean} true if media query can be considered a match, false otherwise\r\n   */\n  matches: function () {\n    return this.mql.matches || this.isUnconditional;\n  },\n\n  /**\r\n   * Clears all handlers and unbinds events\r\n   */\n  clear: function () {\n    each(this.handlers, function (handler) {\n      handler.destroy();\n    });\n    this.mql.removeListener(this.listener);\n    this.handlers.length = 0; //clear array\n  },\n\n  /*\r\n      * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\r\n      */\n  assess: function () {\n    var action = this.matches() ? 'on' : 'off';\n    each(this.handlers, function (handler) {\n      handler[action]();\n    });\n  }\n};\nmodule.exports = MediaQuery;","map":null,"metadata":{},"sourceType":"script"}