{"ast":null,"code":"var _jsxFileName = \"/Users/sikidamjanovic/Documents/GitHub/coauthor/src/Components/Layout/Feed.js\";\nimport React, { Component } from 'react';\nimport Prompt from '../Posts/Prompt';\nimport { Row, Col } from 'antd';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport '../../App.css';\n\nclass Feed extends Component {\n  componentDidUpdate(snapshot, prevState, prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.forceUpdate();\n    }\n  }\n\n  getPrompts() {\n    const _this$props = this.props,\n          posts = _this$props.posts,\n          auth = _this$props.auth; //if (!auth.uid) return <redirect to= '/signin'/> //Use for actions that the user cant complete unless they are signed in\n\n    if (posts) {\n      return posts.map((post, i) => React.createElement(Col, {\n        id: \"prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Prompt, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        genre: post.genre,\n        content: post.content,\n        author: post.author,\n        time: post.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.props.query), this.getPrompts()));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    posts: state.firestore.ordered.posts,\n    auth: state.firebase.auth\n  };\n};\n\nexport default compose(connect(mapStateToProps), firestoreConnect([{\n  collection: 'posts',\n  where: ['genre', '==', window.location.pathname.split(\"/\").pop()]\n}]))(Feed);","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/coauthor/src/Components/Layout/Feed.js"],"names":["React","Component","Prompt","Row","Col","connect","compose","firestoreConnect","Feed","componentDidUpdate","snapshot","prevState","prevProps","query","props","forceUpdate","getPrompts","posts","auth","map","post","i","id","title","genre","content","author","time","render","mapStateToProps","state","console","log","firestore","ordered","firebase","collection","where","window","location","pathname","split","pop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,MAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAO,eAAP;;AAEA,MAAMC,IAAN,SAAmBP,SAAnB,CAA6B;AAEzBQ,EAAAA,kBAAkB,CAACC,QAAD,EAAWC,SAAX,EAAsBC,SAAtB,EAAgC;AAC9C,QAAGA,SAAS,CAACC,KAAV,KAAkB,KAAKC,KAAL,CAAWD,KAAhC,EAAsC;AAClC,WAAKE,WAAL;AACH;AACJ;;AAEDC,EAAAA,UAAU,GAAE;AAAA,wBACgB,KAAKF,KADrB;AAAA,UACAG,KADA,eACAA,KADA;AAAA,UACOC,IADP,eACOA,IADP,EAER;;AACA,QAAGD,KAAH,EAAS;AACL,aACIA,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAMC,CAAN,KACF,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,GAAG,EAAED,IAAI,CAACE,EADd;AAEI,QAAA,EAAE,EAAEF,IAAI,CAACE,EAFb;AAGI,QAAA,KAAK,EAAEF,IAAI,CAACG,KAHhB;AAII,QAAA,KAAK,EAAEH,IAAI,CAACI,KAJhB;AAKI,QAAA,OAAO,EAAEJ,IAAI,CAACK,OALlB;AAMI,QAAA,MAAM,EAAEL,IAAI,CAACM,MANjB;AAOI,QAAA,IAAI,EAAEN,IAAI,CAACO,IAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADR,CADJ;AAeH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKd,KAAL,CAAWD,KAAhB,CADJ,EAEK,KAAKG,UAAL,EAFL,CADJ,CADJ;AAQH;;AAvCwB;;AA0C7B,MAAMa,eAAe,GAAIC,KAAD,IAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACHb,IAAAA,KAAK,EAAEa,KAAK,CAACG,SAAN,CAAgBC,OAAhB,CAAwBjB,KAD5B;AAEHC,IAAAA,IAAI,EAAEY,KAAK,CAACK,QAAN,CAAejB;AAFlB,GAAP;AAIH,CAND;;AAQA,eAAeZ,OAAO,CAClBD,OAAO,CAACwB,eAAD,CADW,EAElBtB,gBAAgB,CAAC,CAAC;AACd6B,EAAAA,UAAU,EAAE,OADE;AAEdC,EAAAA,KAAK,EAAE,CACH,OADG,EACM,IADN,EACYC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoCC,GAApC,EADZ;AAFO,CAAD,CAAD,CAFE,CAAP,CAQblC,IARa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Prompt from '../Posts/Prompt'\nimport { Row, Col } from 'antd';\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport '../../App.css'\n\nclass Feed extends Component {\n\n    componentDidUpdate(snapshot, prevState, prevProps){\n        if(prevProps.query!==this.props.query){\n            this.forceUpdate()\n        }\n    }\n\n    getPrompts(){\n        const { posts, auth } = this.props;\n        //if (!auth.uid) return <redirect to= '/signin'/> //Use for actions that the user cant complete unless they are signed in\n        if(posts){\n            return(\n                posts.map((post,i) =>\n                        <Col id=\"prompt\">\n                            <Prompt \n                                key={post.id} \n                                id={post.id} \n                                title={post.title} \n                                genre={post.genre}\n                                content={post.content}\n                                author={post.author}\n                                time={post.time}\n                            />\n                        </Col> \n                )\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <h3>{this.props.query}</h3>\n                    {this.getPrompts()}\n                </Row>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return {\n        posts: state.firestore.ordered.posts,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([{ \n        collection: 'posts',\n        where: [\n            'genre', '==', window.location.pathname.split(\"/\").pop()\n        ]}\n    ])\n)(Feed)"]},"metadata":{},"sourceType":"module"}