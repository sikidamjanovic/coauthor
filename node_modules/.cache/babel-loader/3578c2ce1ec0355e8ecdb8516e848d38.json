{"ast":null,"code":"var _jsxFileName = \"E:\\\\Personal Files\\\\Projects\\\\CoAuthor\\\\coauthor\\\\src\\\\Components\\\\Layout\\\\Feed.js\";\nimport React, { Component } from 'react';\nimport Prompt from '../Posts/Prompt';\nimport { Row, Col, Select, Breadcrumb, Icon } from 'antd';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport '../../App.css';\n\nclass Feed extends Component {\n  // state = {\n  //     loading: true\n  // }\n  getPrompts() {\n    const _this$props = this.props,\n          posts = _this$props.posts,\n          auth = _this$props.auth; //if (!auth.uid) return <redirect to= '/signin'/> //Use for actions that the user cant complete unless they are signed in\n\n    if (posts) {\n      return posts.map((post, i) => React.createElement(Col, {\n        id: \"prompt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(Prompt, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        genre: post.genre,\n        content: post.content,\n        author: post.author,\n        time: post.createdAt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })));\n    }\n  }\n\n  render() {\n    const Option = Select.Option;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"feed-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"breadcrumb-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Breadcrumb, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Breadcrumb.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Prompts\"), React.createElement(Breadcrumb.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.props.query))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Select, {\n      defaultValue: \"Sort\",\n      style: {\n        width: 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"Hot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"fire\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \"Hot\"), React.createElement(Option, {\n      value: \"Top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"arrow-up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), \"Top\"), React.createElement(Option, {\n      value: \"New\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"bulb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), \"New\")))), this.getPrompts()));\n  }\n\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    posts: state.firestore.ordered.posts,\n    auth: state.firebase.auth\n  };\n};\n\nexport default compose(connect(mapStateToProps), firestoreConnect(props => {\n  const query = props.query;\n  return [{\n    collection: 'posts',\n    where: [\"genre\", \"==\", query]\n  }];\n}))(Feed);","map":{"version":3,"sources":["E:\\Personal Files\\Projects\\CoAuthor\\coauthor\\src\\Components\\Layout\\Feed.js"],"names":["React","Component","Prompt","Row","Col","Select","Breadcrumb","Icon","connect","compose","firestoreConnect","Feed","getPrompts","props","posts","auth","map","post","i","id","title","genre","content","author","createdAt","render","Option","query","width","mapStateToProps","state","firestore","ordered","firebase","collection","where"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Prompt from '../Posts/Prompt'\r\nimport { Row, Col, Select, Breadcrumb, Icon } from 'antd';\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport '../../App.css'\r\n\r\nclass Feed extends Component {\r\n\r\n    // state = {\r\n    //     loading: true\r\n    // }\r\n\r\n    getPrompts(){\r\n        const { posts, auth } = this.props;\r\n        //if (!auth.uid) return <redirect to= '/signin'/> //Use for actions that the user cant complete unless they are signed in\r\n        if(posts){\r\n            return(\r\n                posts.map((post,i) =>\r\n                        <Col id=\"prompt\">\r\n                            <Prompt \r\n                                key={post.id} \r\n                                id={post.id} \r\n                                title={post.title} \r\n                                genre={post.genre}\r\n                                content={post.content}\r\n                                author={post.author}\r\n                                time={post.createdAt}\r\n                            />\r\n                        </Col> \r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Option } = Select;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <div id=\"feed-header\">\r\n                        <div id=\"breadcrumb-container\">\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item>\r\n                                    Prompts\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item>\r\n                                    {this.props.query}\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                        </div>\r\n                        <div>\r\n                            <Select defaultValue=\"Sort\" style={{ width: 100 }}>\r\n                                <Option value=\"Hot\">\r\n                                    <Icon type=\"fire\"/>\r\n                                    Hot\r\n                                </Option>\r\n                                <Option value=\"Top\">\r\n                                    <Icon type=\"arrow-up\"/>\r\n                                    Top\r\n                                </Option>\r\n                                <Option value=\"New\">\r\n                                    <Icon type=\"bulb\"/>\r\n                                    New\r\n                                </Option>\r\n                            </Select>\r\n                        </div>\r\n                    </div>\r\n                    {this.getPrompts()}\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        posts: state.firestore.ordered.posts,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect( props => {\r\n        const { query } = props\r\n        return [\r\n            {\r\n                collection: 'posts',\r\n                where: [\r\n                    \"genre\", \"==\", query\r\n                ]\r\n            }\r\n        ]\r\n    })\r\n)(Feed)"]},"metadata":{},"sourceType":"module"}