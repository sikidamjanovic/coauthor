{"ast":null,"code":"import { firestore } from \"firebase\";\nimport { responsiveArray } from \"antd/lib/_util/responsiveObserve\";\nimport { getFirestore } from \"redux-firestore\";\nimport { relativeTimeRounding } from \"moment\";\nimport { notification } from 'antd';\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n      notification.open({\n        message: 'Logged in successfully!',\n        description: 'Happy posting.',\n        duration: 2\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n    notification.open({\n      message: 'Signed Out Succesfully',\n      description: 'Why the fuck you signing out tho',\n      duration: 2\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    let check = false;\n    let usersRef = firestore.collection('users');\n    let query = usersRef.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        //console.log(doc.id, '=>', doc.data());\n        if (doc.id == newUser.username) {\n          check = true;\n          console.log('fuck');\n        }\n      });\n\n      if (check == false) {\n        firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => {\n          firebase.auth().currentUser.updateProfile({\n            displayName: newUser.username\n          });\n          return firestore.collection('users').doc(newUser.username).set({\n            uid: resp.user.uid\n          }), firebase.auth().currentUser.sendEmailVerification().then(function () {//email sent, look for emailVerified \n          }).catch(function (err) {//error\n          });\n        }).then(() => {\n          dispatch({\n            type: 'SIGNUP_SUCCESS'\n          });\n        }).catch(err => {\n          dispatch({\n            type: 'SIGNUP_ERROR',\n            err\n          });\n        });\n      } else {\n        dispatch({\n          type: 'NAME_TAKEN'\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/coauthor/src/Store/Actions/authActions.js"],"names":["firestore","responsiveArray","getFirestore","relativeTimeRounding","notification","signIn","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","open","message","description","duration","catch","err","signOut","signUp","newUser","check","usersRef","collection","query","get","snapshot","forEach","doc","id","username","console","log","createUserWithEmailAndPassword","resp","currentUser","updateProfile","displayName","set","uid","user","sendEmailVerification"],"mappings":"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","sourcesContent":["import { firestore } from \"firebase\";\nimport { responsiveArray } from \"antd/lib/_util/responsiveObserve\";\nimport { getFirestore } from \"redux-firestore\";\nimport { relativeTimeRounding } from \"moment\";\nimport { notification } from 'antd'\n\nexport const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS'});\n            notification.open({\n                message: 'Logged in successfully!',\n                description: 'Happy posting.',\n                duration: 2\n            })\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err });\n        })\n    }\n} \n\nexport const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\n        })\n        notification.open({\n            message: 'Signed Out Succesfully',\n            description: 'Why the fuck you signing out tho',\n            duration: 2\n        })\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n       \n        let check = false;\n        let usersRef = firestore.collection('users');\n        let query = usersRef.get(\n        ).then(snapshot => {\n            snapshot.forEach(doc => {\n                //console.log(doc.id, '=>', doc.data());\n                if (doc.id == newUser.username) { check = true; console.log('fuck')}\n            });\n            if (check == false) {\n\n                firebase.auth().createUserWithEmailAndPassword(\n                    newUser.email,\n                    newUser.password,\n                ).then((resp) => {\n                    firebase.auth().currentUser.updateProfile({\n                    displayName: newUser.username,\n                    });\n                    return (\n                        firestore.collection('users').doc(newUser.username).set({\n                            uid: resp.user.uid\n                        }),\n                        firebase.auth().currentUser.sendEmailVerification().then(function() {\n                            //email sent, look for emailVerified \n                        }).catch(function(err) {\n                            //error\n                        })\n                    )\n                }).then(() => {\n                    dispatch({ type: 'SIGNUP_SUCCESS'})\n                    \n                }).catch(err => {\n                    dispatch({ type: 'SIGNUP_ERROR', err})\n                })\n            } else {\n                dispatch({ type: 'NAME_TAKEN'})\n            }\n        })\n\n    }\n}"]},"metadata":{},"sourceType":"module"}